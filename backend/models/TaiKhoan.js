const mongoose = require('mongoose');const bcrypt = require('bcryptjs');const taiKhoanSchema = new mongoose.Schema(  {    username: { type: String, required: true, unique: true },    password: { type: String, required: true, minlength: 6 },    email: { type: String, required: true, unique: true },    hoTen: { type: String, required: false },    soDienThoai: { type: String },    diaChi: { type: String },    vaiTro: { type: String, enum: ['user', 'admin'], default: 'user' },    trangThai: { type: Boolean, default: true },    ngayTao: { type: Date, default: Date.now },  },  { timestamps: true });taiKhoanSchema.pre('save', async function (next) {  if (!this.isModified('password')) return next();  const saltRounds = 12;  this.password = await bcrypt.hash(this.password, saltRounds);  next();});taiKhoanSchema.methods.comparePassword = async function (candidatePassword) {  return bcrypt.compare(candidatePassword, this.password);};module.exports = mongoose.model('TaiKhoan', taiKhoanSchema, 'TaiKhoan');