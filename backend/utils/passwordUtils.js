const bcrypt = require('bcryptjs');const hashPassword = async password => {  const saltRounds = 12;  return await bcrypt.hash(password, saltRounds);};const comparePassword = async (plainPassword, hashedPassword) => {  return await bcrypt.compare(plainPassword, hashedPassword);};const validatePassword = password => {  const minLength = 6;  const hasUpperCase = /[A-Z]/.test(password);  const hasLowerCase = /[a-z]/.test(password);  const hasNumbers = /\d/.test(password);  const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);  if (password.length < minLength) {    return {      isValid: false,      message: `Password must be at least ${minLength} characters long`,    };  }  if (!hasLowerCase || !hasUpperCase) {    return {      isValid: false,      message: 'Password must contain both uppercase and lowercase letters',    };  }  if (!hasNumbers) {    return {      isValid: false,      message: 'Password must contain at least one number',    };  }  if (!hasSpecialChar) {    return {      isValid: false,      message: 'Password must contain at least one special character',    };  }  return {    isValid: true,    message: 'Password is valid',  };};const generateRandomPassword = (length = 12) => {  const charset =    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*';  let password = '';  password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[Math.floor(Math.random() * 26)];  password += 'abcdefghijklmnopqrstuvwxyz'[Math.floor(Math.random() * 26)];  password += '0123456789'[Math.floor(Math.random() * 10)];  password += '!@#$%^&*'[Math.floor(Math.random() * 8)];  for (let i = 4; i < length; i++) {    password += charset[Math.floor(Math.random() * charset.length)];  }  return password    .split('')    .sort(() => Math.random() - 0.5)    .join('');};module.exports = {  hashPassword,  comparePassword,  validatePassword,  generateRandomPassword,};