import React, { useState, useEffect } from 'react';import { CartContext } from './CartContextInstance';export const CartProvider = ({ children }) => {  const [cartItems, setCartItems] = useState([]);  const [cartCount, setCartCount] = useState(0);  useEffect(() => {    const savedCart = localStorage.getItem('cart');    if (savedCart) {      try {        const parsedCart = JSON.parse(savedCart);        setCartItems(parsedCart);        updateCartCount(parsedCart);      } catch (error) {        console.error('Error parsing cart from localStorage:', error);        localStorage.removeItem('cart');      }    }  }, []);  useEffect(() => {    localStorage.setItem('cart', JSON.stringify(cartItems));    updateCartCount(cartItems);  }, [cartItems]);  const updateCartCount = (items) => {    const totalCount = items.reduce((total, item) => total + item.quantity, 0);    setCartCount(totalCount);  };  const addToCart = (product, quantity = 1) => {    setCartItems(prevItems => {      const existingItem = prevItems.find(item => item._id === product._id);      if (existingItem) {        return prevItems.map(item =>          item._id === product._id            ? { ...item, quantity: item.quantity + quantity }            : item        );      } else {        return [...prevItems, {          _id: product._id,          name: product.name,          price: product.price,          image: product.image,          quantity: quantity,          stock: product.stock || 0        }];      }    });  };  const removeFromCart = (productId) => {    setCartItems(prevItems => prevItems.filter(item => item._id !== productId));  };  const updateQuantity = (productId, quantity) => {    if (quantity <= 0) {      removeFromCart(productId);      return;    }    setCartItems(prevItems =>      prevItems.map(item =>        item._id === productId          ? { ...item, quantity: quantity }          : item      )    );  };  const clearCart = () => {    setCartItems([]);  };  const getCartTotal = () => {    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);  };  const getCartItemCount = () => {    return cartItems.reduce((total, item) => total + item.quantity, 0);  };  const isInCart = (productId) => {    return cartItems.some(item => item._id === productId);  };  const value = {    cartItems,    cartCount,    addToCart,    removeFromCart,    updateQuantity,    clearCart,    getCartTotal,    getCartItemCount,    isInCart,  };  return (    <CartContext.Provider value={value}>      {children}    </CartContext.Provider>  );};